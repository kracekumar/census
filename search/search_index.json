{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Code Census Code Census is a project to track important code metrics from your source code. The project supports tracking - mypy type coverage Installation pip install code_census Documentation You can read tutorial or command references .","title":"Welcome to Code Census"},{"location":"#welcome-to-code-census","text":"Code Census is a project to track important code metrics from your source code. The project supports tracking - mypy type coverage","title":"Welcome to Code Census"},{"location":"#installation","text":"pip install code_census","title":"Installation"},{"location":"#documentation","text":"You can read tutorial or command references .","title":"Documentation"},{"location":"reference/","text":"Commands Add census command options CLI Reference This page provides documentation for our command line tools. cli All command line entry point for the project. Usage: cli [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False # create-db Create all the tables required for the project using alembic migrations. Usage: cli create-db [OPTIONS] Options: Name Type Description Default --db-url text Pass postgres connection details like postgresql://postgres:pass@db.host:5432/census or Set DB URL as environment variable like DB_URL=\"postgresql://postgres:pass@db.host:5432/census\". required --help boolean Show this message and exit. False # mypy mypy specific sub-commands. Usage: cli mypy [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False ## run mypy specific run sub-commands. Usage: cli mypy run [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False ### add Add run details. Usage: cli mypy run add [OPTIONS] PROJECT_NAME Options: Name Type Description Default --artifact-url text N/A `` --run-info json N/A {} --mypy-coverage-file path N/A required --db-url text Pass postgres connection details like postgresql://postgres:pass@db.host:5432/census or Set DB URL as environment variable like DB_URL=\"postgresql://postgres:pass@db.host:5432/census\". required --help boolean Show this message and exit. False ### all Display all the runs for the project. Usage: cli mypy run all [OPTIONS] PROJECT_NAME Options: Name Type Description Default --db-url text Pass postgres connection details like postgresql://postgres:pass@db.host:5432/census or Set DB URL as environment variable like DB_URL=\"postgresql://postgres:pass@db.host:5432/census\". required --help boolean Show this message and exit. False ### get-info Get run info Usage: cli mypy run get-info [OPTIONS] RUN_ID Options: Name Type Description Default --db-url text Pass postgres connection details like postgresql://postgres:pass@db.host:5432/census or Set DB URL as environment variable like DB_URL=\"postgresql://postgres:pass@db.host:5432/census\". required --help boolean Show this message and exit. False # project Project specific sub-commands. Usage: cli project [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False ## all Displays all the projects in the database. Usage: cli project all [OPTIONS] Options: Name Type Description Default --db-url text Pass postgres connection details like postgresql://postgres:pass@db.host:5432/census or Set DB URL as environment variable like DB_URL=\"postgresql://postgres:pass@db.host:5432/census\". required --help boolean Show this message and exit. False ## create Create a new project with the given details. If the name already exists, the project creation is skipped. Usage: cli project create [OPTIONS] NAME Options: Name Type Description Default --description text N/A `` --url text N/A `` --db-url text Pass postgres connection details like postgresql://postgres:pass@db.host:5432/census or Set DB URL as environment variable like DB_URL=\"postgresql://postgres:pass@db.host:5432/census\". required --help boolean Show this message and exit. False","title":"Commands"},{"location":"reference/#commands","text":"Add census command options","title":"Commands"},{"location":"reference/#cli-reference","text":"This page provides documentation for our command line tools.","title":"CLI Reference"},{"location":"reference/#cli","text":"All command line entry point for the project. Usage: cli [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False","title":"cli"},{"location":"reference/#create-db","text":"Create all the tables required for the project using alembic migrations. Usage: cli create-db [OPTIONS] Options: Name Type Description Default --db-url text Pass postgres connection details like postgresql://postgres:pass@db.host:5432/census or Set DB URL as environment variable like DB_URL=\"postgresql://postgres:pass@db.host:5432/census\". required --help boolean Show this message and exit. False","title":"# create-db"},{"location":"reference/#mypy","text":"mypy specific sub-commands. Usage: cli mypy [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False","title":"# mypy"},{"location":"reference/#run","text":"mypy specific run sub-commands. Usage: cli mypy run [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False","title":"## run"},{"location":"reference/#add","text":"Add run details. Usage: cli mypy run add [OPTIONS] PROJECT_NAME Options: Name Type Description Default --artifact-url text N/A `` --run-info json N/A {} --mypy-coverage-file path N/A required --db-url text Pass postgres connection details like postgresql://postgres:pass@db.host:5432/census or Set DB URL as environment variable like DB_URL=\"postgresql://postgres:pass@db.host:5432/census\". required --help boolean Show this message and exit. False","title":"### add"},{"location":"reference/#all","text":"Display all the runs for the project. Usage: cli mypy run all [OPTIONS] PROJECT_NAME Options: Name Type Description Default --db-url text Pass postgres connection details like postgresql://postgres:pass@db.host:5432/census or Set DB URL as environment variable like DB_URL=\"postgresql://postgres:pass@db.host:5432/census\". required --help boolean Show this message and exit. False","title":"### all"},{"location":"reference/#get-info","text":"Get run info Usage: cli mypy run get-info [OPTIONS] RUN_ID Options: Name Type Description Default --db-url text Pass postgres connection details like postgresql://postgres:pass@db.host:5432/census or Set DB URL as environment variable like DB_URL=\"postgresql://postgres:pass@db.host:5432/census\". required --help boolean Show this message and exit. False","title":"### get-info"},{"location":"reference/#project","text":"Project specific sub-commands. Usage: cli project [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False","title":"# project"},{"location":"reference/#all_1","text":"Displays all the projects in the database. Usage: cli project all [OPTIONS] Options: Name Type Description Default --db-url text Pass postgres connection details like postgresql://postgres:pass@db.host:5432/census or Set DB URL as environment variable like DB_URL=\"postgresql://postgres:pass@db.host:5432/census\". required --help boolean Show this message and exit. False","title":"## all"},{"location":"reference/#create","text":"Create a new project with the given details. If the name already exists, the project creation is skipped. Usage: cli project create [OPTIONS] NAME Options: Name Type Description Default --description text N/A `` --url text N/A `` --db-url text Pass postgres connection details like postgresql://postgres:pass@db.host:5432/census or Set DB URL as environment variable like DB_URL=\"postgresql://postgres:pass@db.host:5432/census\". required --help boolean Show this message and exit. False","title":"## create"},{"location":"tutorial/","text":"In this tutorial, you will learn, how to use census project to track mypy coverage. After installing the code_census , you need to follow three steps. Create a postgres database to track metrics. Fill the database with necessary details to track the project metrics. Set up UI to view results in your favorite tool. 1. Create a new database Createdb After installing PostgreSQL , create a new database. Here I'm using createdb command, please use your preferred way to create a database. $createdb census Verify the new database $psql -h localhost -d census psql (13.3, server 13.4) Type \"help\" for help. census=# census=# \\dt Did not find any relations. The psql successfully logged in the database and database is empty. 2. Fill the database Create tables You can access code_census CLI interface via census or code_census command. $census Usage: census [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: create-db mypy project census command help section shows three commands, let's run create-db to create tables. Note : create-db does not create a new database but creates tables. To create tables you need to pass the database credentials. $census create-db --db-url postgresql://:@localhost:5432/census INFO [alembic.runtime.migration] Context impl PostgresqlImpl. INFO [alembic.runtime.migration] Will assume transactional DDL. INFO [alembic.runtime.migration] Running upgrade -> cc7054b42c18, Add initial tables /private/tmp/venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:415: SAWarning: Can't validate argument 'max_length'; can't locate any SQLAlchemy dialect named 'max' util.warn( \u2705 The schema for census app is created Now the census database is filled with tables. $psql -h localhost -d census psql (13.3, server 13.4) Type \"help\" for help. census=# \\dt List of relations Schema | Name | Type | Owner --------+-----------------+-------+------- public | alembic_version | table | user public | mypyrunlineitem | table | user public | project | table | user public | run | table | user (4 rows) Note : Wherever you're using --db-url , the same argument can be passed as environment variable DB_URL . Create a new project Let's see project command documentation. $census project --help Usage: census project [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: all create Now let's see project create command documentation. $census project create --help Usage: census project create [OPTIONS] NAME Options: --description TEXT --url TEXT --db-url TEXT Pass postgres connection details like postgresql://postgres:pass@db.host:5432/code_census or Set DB URL as environment variable like DB_URL=\"postgres ql://postgres:pass@db.host:5432/code_census\". [required] --help Show this message and exit. create command takes in mandatory NAME , optional --description, --url, --db-url . Let's create a project for code_census . $census project create code_census --description \"A CLI tool to track code metrics\" --url \"https://github.com/kracekumar/code_census\" --db-url postgresql://:@localhost:5432/census Project created. project=<Project(id=2, name=code_census, description=A CLI tool to track code metrics)> Now the project is successfully created. project all command $census project all --db-url postgresql://:@localhost:5432/census Projects \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 ID \u2503 Name \u2503 Description \u2503 URL \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 code_census \u2502 A CLI tool to track code metrics \u2502 https://github.com/kracekumar/code_census \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 all sub-command displays all the projects. Upload mypy run report Note : mypy report can be generated using --html-report flag like mypy --config-file=pyproject.toml . --html-report /tmp/code_census $census --help Usage: census [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: create-db mypy project We have used create-db and mypy command and now it's time to use mypy command. Let's see the mypy sub-command documentation $census mypy --help Usage: census mypy [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: run mypy sub-command has one more sub-command run . $census mypy run --help Usage: census mypy run [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: add all get-info run has further three sub-commands, add, all, get-info . Let's see the documentation for add command. $census mypy run add --help Usage: census mypy run add [OPTIONS] PROJECT_NAME Options: --artifact-url TEXT --run-info JSON --mypy-coverage-file PATH [required] --db-url TEXT Pass postgres connection details like postgresql: //postgres:pass@db.host:5432/code_census or Set DB URL as environment variable like DB_URL=\"postg resql://postgres:pass@db.host:5432/code_census\". [required] --help Show this message and exit. Upload the artifact Now that mypy coverage report is available, let's upload the coverage info. $census mypy run add code_census --run-info '{\"git\": {\"commit\": \"0c9b759639ed4025522370b81ade06d1efa64bed\", \"version\": \"0.0.8\"}}' --mypy-coverage-file code_census/index.html --db-url postgresql://:@localhost:5432/census Created a new run=<Run(id=1, project_name=code_census) Added 7 file coverages We passed on following information to the add sub-command. project name: code_census --run-info is a JSON data details of the run and project. Here git JSON object contains commit and version . --mypy-coverage-file path to coverage file index.html . --db-url database details View the run details in terminal Now to view the run details, we can use get-info sub-command. Let's see the documentation $census mypy run get-info --help Usage: census mypy run get-info [OPTIONS] RUN_ID Options: --db-url TEXT Pass postgres connection details like postgresql://postgres:pass@db.host:5432/code_census or Set DB URL as environment variable like DB_URL=\"postgresql://postgres:pass@db.host:5432/code_census\". [required] --help Show this message and exit. We know the run id, it's 1 . $census mypy run get-info 1 --db-url postgresql://:@localhost:5432/census Mypy Coverage for Run ID: 1 \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 File \u2503 Imprecision \u2503 Lines \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 cc7054b42c18_add_initial_tables \u2502 64.0 % \u2502 75 \u2502 \u2502 code_census \u2502 0.0 % \u2502 3 \u2502 \u2502 code_census.cli \u2502 38.96 % \u2502 231 \u2502 \u2502 code_census.formatter \u2502 17.07 % \u2502 41 \u2502 \u2502 code_census.models \u2502 40.98 % \u2502 122 \u2502 \u2502 code_census.mypy_utils \u2502 28.07 % \u2502 57 \u2502 \u2502 env \u2502 35.37 % \u2502 82 \u2502 \u2502 -- \u2502 -- \u2502 -- \u2502 \u2502 Summary \u2502 32.06 % \u2502 611 \u2502 \u2502 -- \u2502 -- \u2502 -- \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Now the get-info command prints all the mypy coverage in the code_census file. Display all run details for the project $census mypy run all code_census --db-url postgresql://:@localhost:5432/census All runs for project: code_census \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 ID \u2503 Created At \u2503 Run Info \u2503 Line Items \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 2021-09-09 16:48:24.865040 \u2502 {'git': {'commit': '0c9b759639ed4025522370b81ade06d1efa64bed', 'version': '0.0.8'}} \u2502 7 \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 3. Create dashboard To view all the runs data and how the coverage is moving, we can use charts. There are different solutions like Apache Superset , Metabase , etc ... Metabase Metabase uses questions and dashboards to visualize and understand the data. We will be creating a question and the add the question to the dashboard. After logging into the metabase as an admin, go to Settings -> Admin . Step 1 - Start From the top-bar, click on Databases . Step 2 - Add Database Click Add Database button and add the connection details (metabase does not allow empty username and password). After adding the details, from settings click exit admin . Step 3 - Select Database In the home screen, select census database. Step 4 - Table View After clicking the census , the tables are displayed. Step 5 - Browse Data Click on the table, mypyrunlineitem . The page shows all the rows in the table. Step 6 - SQL Query Now let's write a simple SQL query to get the imprecision by run. In the SQL editor, type the query, select run_id, avg(imprecision) as imprecision from mypyrunlineitem group by run_id; . You will see the results with two columns run_id, imprecision . Step 7 - Visualization Now select the visualization tab in the lower left bar. Select the chart as Line Chart and X-axis as run_id and Y-axis as imprecision . Step 8 - Question Now Click on the save button on the right corner. Enter the details as show in the image and save the question. Step 9 - Add to dashboard Click Yes please! in the next dialog box for the question, Saved! Add this to dashboard? . Step 10 - New Dashboard Enter the new dashboard details as show in the image. Step 11 - Save Dashboard Click on the Save button on the right corner to save the dashboard. Step 12 - Dashboard Finally dashboard contains one question. Now you can create more questions and add to the dashboard and have a view of your project! Note : All the screenshots are taken from the metabase Mac App, the interface and menus may look different.","title":"Tutorial"},{"location":"tutorial/#1-create-a-new-database","text":"","title":"1. Create a new database"},{"location":"tutorial/#createdb","text":"After installing PostgreSQL , create a new database. Here I'm using createdb command, please use your preferred way to create a database. $createdb census","title":"Createdb"},{"location":"tutorial/#verify-the-new-database","text":"$psql -h localhost -d census psql (13.3, server 13.4) Type \"help\" for help. census=# census=# \\dt Did not find any relations. The psql successfully logged in the database and database is empty.","title":"Verify the new database"},{"location":"tutorial/#2-fill-the-database","text":"","title":"2. Fill the database"},{"location":"tutorial/#create-tables","text":"You can access code_census CLI interface via census or code_census command. $census Usage: census [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: create-db mypy project census command help section shows three commands, let's run create-db to create tables. Note : create-db does not create a new database but creates tables. To create tables you need to pass the database credentials. $census create-db --db-url postgresql://:@localhost:5432/census INFO [alembic.runtime.migration] Context impl PostgresqlImpl. INFO [alembic.runtime.migration] Will assume transactional DDL. INFO [alembic.runtime.migration] Running upgrade -> cc7054b42c18, Add initial tables /private/tmp/venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:415: SAWarning: Can't validate argument 'max_length'; can't locate any SQLAlchemy dialect named 'max' util.warn( \u2705 The schema for census app is created Now the census database is filled with tables. $psql -h localhost -d census psql (13.3, server 13.4) Type \"help\" for help. census=# \\dt List of relations Schema | Name | Type | Owner --------+-----------------+-------+------- public | alembic_version | table | user public | mypyrunlineitem | table | user public | project | table | user public | run | table | user (4 rows) Note : Wherever you're using --db-url , the same argument can be passed as environment variable DB_URL .","title":"Create tables"},{"location":"tutorial/#create-a-new-project","text":"Let's see project command documentation. $census project --help Usage: census project [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: all create Now let's see project create command documentation. $census project create --help Usage: census project create [OPTIONS] NAME Options: --description TEXT --url TEXT --db-url TEXT Pass postgres connection details like postgresql://postgres:pass@db.host:5432/code_census or Set DB URL as environment variable like DB_URL=\"postgres ql://postgres:pass@db.host:5432/code_census\". [required] --help Show this message and exit. create command takes in mandatory NAME , optional --description, --url, --db-url . Let's create a project for code_census . $census project create code_census --description \"A CLI tool to track code metrics\" --url \"https://github.com/kracekumar/code_census\" --db-url postgresql://:@localhost:5432/census Project created. project=<Project(id=2, name=code_census, description=A CLI tool to track code metrics)> Now the project is successfully created.","title":"Create a new project"},{"location":"tutorial/#project-all-command","text":"$census project all --db-url postgresql://:@localhost:5432/census Projects \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 ID \u2503 Name \u2503 Description \u2503 URL \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 code_census \u2502 A CLI tool to track code metrics \u2502 https://github.com/kracekumar/code_census \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 all sub-command displays all the projects.","title":"project all command"},{"location":"tutorial/#upload-mypy-run-report","text":"Note : mypy report can be generated using --html-report flag like mypy --config-file=pyproject.toml . --html-report /tmp/code_census $census --help Usage: census [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: create-db mypy project We have used create-db and mypy command and now it's time to use mypy command. Let's see the mypy sub-command documentation $census mypy --help Usage: census mypy [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: run mypy sub-command has one more sub-command run . $census mypy run --help Usage: census mypy run [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: add all get-info run has further three sub-commands, add, all, get-info . Let's see the documentation for add command. $census mypy run add --help Usage: census mypy run add [OPTIONS] PROJECT_NAME Options: --artifact-url TEXT --run-info JSON --mypy-coverage-file PATH [required] --db-url TEXT Pass postgres connection details like postgresql: //postgres:pass@db.host:5432/code_census or Set DB URL as environment variable like DB_URL=\"postg resql://postgres:pass@db.host:5432/code_census\". [required] --help Show this message and exit.","title":"Upload mypy run report"},{"location":"tutorial/#upload-the-artifact","text":"Now that mypy coverage report is available, let's upload the coverage info. $census mypy run add code_census --run-info '{\"git\": {\"commit\": \"0c9b759639ed4025522370b81ade06d1efa64bed\", \"version\": \"0.0.8\"}}' --mypy-coverage-file code_census/index.html --db-url postgresql://:@localhost:5432/census Created a new run=<Run(id=1, project_name=code_census) Added 7 file coverages We passed on following information to the add sub-command. project name: code_census --run-info is a JSON data details of the run and project. Here git JSON object contains commit and version . --mypy-coverage-file path to coverage file index.html . --db-url database details","title":"Upload the artifact"},{"location":"tutorial/#view-the-run-details-in-terminal","text":"Now to view the run details, we can use get-info sub-command. Let's see the documentation $census mypy run get-info --help Usage: census mypy run get-info [OPTIONS] RUN_ID Options: --db-url TEXT Pass postgres connection details like postgresql://postgres:pass@db.host:5432/code_census or Set DB URL as environment variable like DB_URL=\"postgresql://postgres:pass@db.host:5432/code_census\". [required] --help Show this message and exit. We know the run id, it's 1 . $census mypy run get-info 1 --db-url postgresql://:@localhost:5432/census Mypy Coverage for Run ID: 1 \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 File \u2503 Imprecision \u2503 Lines \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 cc7054b42c18_add_initial_tables \u2502 64.0 % \u2502 75 \u2502 \u2502 code_census \u2502 0.0 % \u2502 3 \u2502 \u2502 code_census.cli \u2502 38.96 % \u2502 231 \u2502 \u2502 code_census.formatter \u2502 17.07 % \u2502 41 \u2502 \u2502 code_census.models \u2502 40.98 % \u2502 122 \u2502 \u2502 code_census.mypy_utils \u2502 28.07 % \u2502 57 \u2502 \u2502 env \u2502 35.37 % \u2502 82 \u2502 \u2502 -- \u2502 -- \u2502 -- \u2502 \u2502 Summary \u2502 32.06 % \u2502 611 \u2502 \u2502 -- \u2502 -- \u2502 -- \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Now the get-info command prints all the mypy coverage in the code_census file.","title":"View the run details in terminal"},{"location":"tutorial/#display-all-run-details-for-the-project","text":"$census mypy run all code_census --db-url postgresql://:@localhost:5432/census All runs for project: code_census \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 ID \u2503 Created At \u2503 Run Info \u2503 Line Items \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 2021-09-09 16:48:24.865040 \u2502 {'git': {'commit': '0c9b759639ed4025522370b81ade06d1efa64bed', 'version': '0.0.8'}} \u2502 7 \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Display all run details for the project"},{"location":"tutorial/#3-create-dashboard","text":"To view all the runs data and how the coverage is moving, we can use charts. There are different solutions like Apache Superset , Metabase , etc ...","title":"3. Create dashboard"},{"location":"tutorial/#metabase","text":"Metabase uses questions and dashboards to visualize and understand the data. We will be creating a question and the add the question to the dashboard. After logging into the metabase as an admin, go to Settings -> Admin .","title":"Metabase"},{"location":"tutorial/#step-1-start","text":"From the top-bar, click on Databases .","title":"Step 1 - Start"},{"location":"tutorial/#step-2-add-database","text":"Click Add Database button and add the connection details (metabase does not allow empty username and password). After adding the details, from settings click exit admin .","title":"Step 2 - Add Database"},{"location":"tutorial/#step-3-select-database","text":"In the home screen, select census database.","title":"Step 3 - Select Database"},{"location":"tutorial/#step-4-table-view","text":"After clicking the census , the tables are displayed.","title":"Step 4 - Table View"},{"location":"tutorial/#step-5-browse-data","text":"Click on the table, mypyrunlineitem . The page shows all the rows in the table.","title":"Step 5 - Browse Data"},{"location":"tutorial/#step-6-sql-query","text":"Now let's write a simple SQL query to get the imprecision by run. In the SQL editor, type the query, select run_id, avg(imprecision) as imprecision from mypyrunlineitem group by run_id; . You will see the results with two columns run_id, imprecision .","title":"Step 6 - SQL Query"},{"location":"tutorial/#step-7-visualization","text":"Now select the visualization tab in the lower left bar. Select the chart as Line Chart and X-axis as run_id and Y-axis as imprecision .","title":"Step 7 - Visualization"},{"location":"tutorial/#step-8-question","text":"Now Click on the save button on the right corner. Enter the details as show in the image and save the question.","title":"Step 8 - Question"},{"location":"tutorial/#step-9-add-to-dashboard","text":"Click Yes please! in the next dialog box for the question, Saved! Add this to dashboard? .","title":"Step 9 - Add to dashboard"},{"location":"tutorial/#step-10-new-dashboard","text":"Enter the new dashboard details as show in the image.","title":"Step 10 - New Dashboard"},{"location":"tutorial/#step-11-save-dashboard","text":"Click on the Save button on the right corner to save the dashboard.","title":"Step 11 - Save Dashboard"},{"location":"tutorial/#step-12-dashboard","text":"Finally dashboard contains one question. Now you can create more questions and add to the dashboard and have a view of your project! Note : All the screenshots are taken from the metabase Mac App, the interface and menus may look different.","title":"Step 12 - Dashboard"}]}